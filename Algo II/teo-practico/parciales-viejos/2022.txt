1) Cocktail sort: una variacion del selection sort 

proc cocktail_sort(in/out a :array[1..n] of T)
    var i, j, minpos, maxpos : nat 
    i := 1
    j := n
    do i < j -> minpos := min_pos_from(a, i, j)
                swap(a, i, minpos)
                maxpos := max_pos_from(a, i, j)
                swap(a, j, maxpos)
                i := i+1
                j := j-1
    od
end proc 

fun min_pos_from(a : array[1..n] of T, i, j : nat) ret minpos : nat
    var k : nat 
    k := i+1 
    minpos := i
    while k <= j do 
        if a[k] < a[minpos] then 
            minpos := k
        fi 
        k := k+1
    od 
end fun 

fun max_pos_from(a : array[1..n] of T, i, j : nat) ret maxpos : nat
    var k : nat 
    k := i+1 
    maxpos := i
    while k <= j do 
        if a[k] > a[minpos] then 
            maxpos := k
        fi 
        k := k+1
    od 
end fun 


4) Implementar funcion que reciba dos listas de enteros
y devuelva otra lista que contenga en las posiciones pares
todos los elementos de la primera lista en el mismo orden,
y en las posiciones impares todos los elementos de la segunda lista y en el mismo orden.

Asumimos que la primera posicion es par, pues la especificacion del index() sugiere que el 1er elemento esta en la posicion 0 (par).

{- PRE: length(l) = length(m) -}
fun concat_paridad(l : List of T, m : List of T) ret q : List of T
    q := empty()
    var p, c : List of T 
    p := copy_list(l)
    c := copy_list(m)
    while(not is_empty(p) ^ not is_empty(c)) do 
        addr(q, head(p))
        tail(p)
        addr(q, head(c)) //si la 1ra pos fuese impar, esto deberia invertirse
        tail(c)
    od 
end fun 

