2) 

implement List of T where

type List of T = tuple 
                    elems: array [1..N] of T
                    size : nat
                end tuple

fun empty() ret l : List of T
    l.size := 0
end fun

proc addl (in e : T, in/out l : List of T)
    for i := l.size downto 1 do
        l.elems[i+1] := l.elems[i]
    od
    l.elems[1] := e
    l.size := l.size+1
end proc

proc destroy (in/out l: List of T)
    skip
end proc

fun is_empty(l : List of T) ret b : bool
    b := l.size = 0
end fun

{- PRE: not is_empty(l) -}
fun head (l : List of T) ret e : T
    e := l.elems[1]
end fun

{- PRE: not is_empty(l) -}
proc tail(in/out l : List of T)
    for i := 1 to l.size-1 do
        l.elems[i] := l.elems[i+1]
    od
    l.size := l.size-1
end proc

{- NUEVA PRE: l.size < N -}
proc addr (in/out l : List of T, in e : T)
    l.elems[l.size+1] := e
    l.size := l.size + 1
end proc

fun length (l : List of T) ret n : nat
    n := l.size
end fun

{- NUEVA PRE: l.size + l0.size <= n -}
proc concat(in/out l : List of T,in l0 : List of T)
    for i := 1 to l0.size do
        l.elems[l.size+i] := l0.elems[i]
        l.size := l.size+1
    od
end proc

{- PRE: length(l) > n -}
fun index(l : List of T, n : nat) ret e : T
    e := l.elems[n]
end fun

proc take(in/out l : List of T, in n : nat)
    l.size := n
end proc

proc drop(in/out l: List of T, in n: nat)
    var i, k : nat
    k := n+1
    i := 1
    while (k <= l.size) do
        l.elems[i] := l.elems[k]
        k := k+1
        i := i+1
    od
    l.size := l.size - n
end proc

fun copy_list(l1: List of T) ret l2: List of T
    for i := 1 to l1.size do
        l2[i] := l1[i]
    od
    l2.size := l1.size
end fun