3) a)

implement Queue of T where
type Queue of T = tuple
                    elems : array[0..N-1] of T
                    size : nat
                  end tuple

fun empty_queue() ret q : Queue of T 
    q.size := 0
end fun 

{- PRE: q.size < N -}
proc enqueue(in/out q : Queue of T, in e : T)
    q.elems[q.size+1] := e 
    q.size := q.size + 1 
end proc 

fun is_empty_queue(q : Queue of T) ret b : Bool 
    b := q.size = 0 
end fun 

fun first(q : Queue of T) ret e : T 
    e := q.elems[0]
end fun 

proc dequeue(in/out q : Queue of T)
    for i:=0 to N-2 do
        q.elems[i] := q.elems[i+1]
    od 
    q.size := q.size-1
end proc 

3) b)

implement Queue of T where 
type Queue of T = tuple
                    elems : array[0..N-1]
                    init : nat 
                    size : nat
                  end tuple 

fun empty_queue() ret q : Queue of T 
    q.init := 0
    q.size := 0 
end fun     

{- PRE: q.size < N -}
proc enqueue(in/out q : Queue of T, in e : T)
    q.elems[(q.init + q.size) % N] := e
    q.size := q.size+1
end proc    

fun is_empty_queue(q : Queue of T) ret b : Bool 
    b := q.size = 0 
end fun 

fun first(q : Queue of T) ret e : T 
    e := q.elems[q.init]
end fun 

{- PRE: not is_empty_queue(q) -}
proc dequeue(in/out q : Queue of T)
    q.init := (q.init + 1) % N
    q.size := q.size-1
end proc 

